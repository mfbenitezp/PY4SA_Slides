{
  "hash": "45a76fdbca8aa09fff9813f051143094",
  "result": {
    "markdown": "---\ntitle: \"Python for Spatial Analysis – PY4SA\"\nauthor: \"Dr Fernando Benitez-Paez\"\ninstitute: School of Geography and Sustainable Development\nsubtitle: Module GG3209 - Second Part\nformat: \n    revealjs:\n     incremental: false\n     title-slide-attributes:\n        data-background-image: img/python_bg.jpg\n        data-background-opacity: \"0.5\"\n     slide-number: true\n     show-slide-number: print\n     footer: \"Module GG3209 - Second Part\"\n     execute:\n        echo: true\n        jupyter: python3\n---\n\n## Housekeeping\n\n- Lecture with basic concepts and some demonstrations\n- Labs with exercises, Assessment No 2\n- Course Resources:\n- Course Book (Labs, assessment, Slides)\n- If something is not clear, stop me and ask.\n- During exercises (you can also ask for assistance from the TAs).\n\n## Module in a glance\n\n- What is Python, and why will you use it\n- Building blocks -- What components will we use\n - Miniconda\n - Jupyter Notebook\n - Git -- GitHub Account\n- Python Basics\n  - Two notebooks for guidance\n  - One notebook for practice\n\n## Let me ask you something\n\n-   Do you have any programming experience?\n    -   Why should we learn to program?\n-   Why should we learn Python if we can use QGIS or another GIS tool?\n\n. . .\n\n::: columns\n::: {.column width=\"50%\"}\n![](img/Picture1.png)\n:::\n\n::: {.column width=\"50%\"}\n[Play here the video](https://www.youtube.com/watch?v=Ct-lOOUqmyY&t=4s)\n:::\n:::\n\n------------------------------------------------------------------------\n\n![](img/GISTools_Carto.jpg){width=\"50%\"}\n\n------------------------------------------------------------------------\n\n## Failure\n\n-   You will fail, but that is ok, it is part of the process.\n-   Don't be afraid of it.\n-   Error messages are scary, I know, but they are useful as well\n\n# Why Python\n\n-   A free and open-sourced scripting language that was commonly used to automate tasks (GIS world).\n-   Nowadays can be used to read, process and map spatial data. It uses a code structure, referred to as syntax, that is easy to read and understand.\n-   Syntax helps beginners to learn the language and helps professionals to minimise development and maintenance costs.\n-   Python has thousands of packages so that you can integrate a vast number of tools and programs.\n\n## What makes a Python script?\n\n:::{style=\"margin-bottom: 2em;\"}\nA Python script is a sequence of instructions. The structure and arrangement of the instructions are referred to as syntax. Python instructions use various language elements, including data types, statements, and functions.\n:::\n\n![](img/Picture6.png){width=\"874\"}\n\n## Why is it so powerful\n\n-   Modules are collections of related code that contain variables, definitions, and instructions.\n    -   These modules are organised into packages, which can be further grouped into libraries.\n-   These libraries are typically specialised and enable you to perform higher-level tasks related to those specialities.\n    -   For example, `Pandas` enables you to work with tabular data, `NumPy` grant the ability to make advanced mathematical and scientific computations, and `Matplotlib` allows you to visualise data graphically.\n\n## Python Modes\n\nThere are many ways to write and run a python script:\n\n-   Your terminal (Mac, Win, Linux)\n-   Python scripts (.py) (Programs)\n-   Ipython - Jupyter Notebook (.ipynb): Interactive, widely use in research\n-   Google Colab (Cloud service, require a google account)\n-   More...\n\n# Demo No 1: {auto-animate=\"true\"}\n\nRunning a python Script\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\na = 5\nb = 4\nc = a+b\n```\n:::\n\n\n# Demo No 1: {auto-animate=\"true\"}\n\nRunning a python Script\n\n::: {.cell output-location='fragment' execution_count=2}\n``` {.python .cell-code}\na = 5\nb = 4\nc = a+b\n\nprint (c)\nprint (\"Hello world\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n9\nHello world\n```\n:::\n:::\n\n\n# Conda - Miniconda {.smaller}\n\n-   `Conda` is an open-source package and environment management system that runs on Windows, macOS, and Linux.\n-   Conda easily creates, saves, loads and switches between environments on your local computer. It was created for Python programs but can package and distribute software for any language.\n-   `Miniconda` is a minimal installer for conda. It is a small version of Anaconda that includes only conda, Python, the packages they depend on, and a small number of other useful packages, including pip, zlib and a few others.\n\n# Jupyter Notebook (Lab) {.smaller}\n\n::: columns\n::: {.column width=\"40%\"}\n![](img/JupyterLab_pic.png){.border .border-thick}\n:::\n\n::: {.column width=\"60%\"}\n-   This is the python environment we will use to learn python and for our labs\n-   Easy-to-use environment\n-   Web-based\n-   Combines both text and code into one\n-   Come with a great number of useful packages\n:::\n:::\n\n::: footer\nLearn more: [Jupyter](https://quarto.org/docs/tools/jupyter-lab.html), [VS Code](https://quarto.org/docs/tools/vscode.html), [Text Editors](https://quarto.org/docs/tools/text-editors.html)\n:::\n\n## Jupyter Notebook Structure {.smaller}\n\n![](img/JupyterStructure.png){.border .border-thick}\n\n## Notebook Structure {.smaller}\n\n![](img/notebook_structure.png){.border .border-thick}\n\n# Markdown {.smaller}\n\nMarkdown is a lightweight markup language that you can use to add formatting elements to plaintext text documents. Created in 2004, Markdown is now one of the world's most popular markup languages.\n\n![](img/markdown.png){.border .border-thick}\n\n## Markdown Structure {.smaller}\n\n::: {layout-ncol=\"2\"}\n-   Markdown can be used for everything\n-   Markdown is portable\n-   Markdown is platform-independent\n\n![](img/markdown_structure.png){.border .border-thick}\n:::\n\n::: footer\n[Basic Syntax \\| Markdown Guide](https://www.markdownguide.org/){preview-link=\"true\" style=\"text-align: center\"}\n:::\n\n# Demo No 2:\n\nJupyter Lab\n\n# GIT -- Version control {.smaller}\n\nGit is open-source software for version control, which means that it tracks changes to your files as you work on them over time.\n\nSimilar to \"track changes\" feature in a word document, except you must choose which versions to include in the tracking---it is not automatic.\n\nIt can be tricky, and we may or may not have issues; it happens to everyone. Widely used in academia and industry.\n\n# Github? {.smaller}\n\nGitHub is a web-based version control system which uses Git, the open-source version control software. It provides a place for developers to host and share their projects --- a space to save earlier iterations and collaborate with other developers, colleagues, or co-workers.\n\nIt can be used even to host websites, research projects, portfolios, data, and more.\n\nIt is widely popular and can be a way to get a job nowadays in the GIScience field.\n\n## How does it work {.smaller}\n\n![](img/git_1.png){.absolute top=\"70\" left=\"-17\" height=\"16.04cm\" weight=\"7.48cm\"}\n\n![](img/git2.png){.absolute .fragment top=\"300\" left=\"238\" width=\"3.92cm\" height=\"10.2cm\"}\n\n![](img/git3.png){.absolute .fragment top=\"70\" left=\"371\" height=\"15.87cm\" width=\"8.41cm\"}\n\n![](img/git4.png){.absolute .fragment top=\"70\" right=\"-60\" height=\"15.62cm\" width=\"10.2cm\"}\n\n![](img/git5.png){.absolute .fragment bottom=\"6\" right=\"89\" height=\"4.53cm\" width=\"22.71cm\"}\n\n## Terminology {.smaller .scrollable}\n\n-   **Repository:** Is a project (a folder) containing files and sub-folders. A repository tracks versions of files and folders.\n-   **Branch:** A branch is a parallel version of your repository. By default, your repository has one branch named main and is considered the definitive branch. You can use branches to have different project versions at once.\n-   **Clone:** Local copy of a repository stored on the cloud. Clones can be synced up with their originals in the GitHub repository.\n-   **Commit:** A commit is a set of changes to the files and folders in your project. A commit exists in a branch.\n-   **Fork:** \"Forking\" is when you copy another user's repository to your account. You can make any changes to your forked copy, leaving the original unaffected. \n-   **Pull/push:** Merging changes made to the repository files into the local copy you're working on is called \"pulling.\" A \"push\" is the reverse --- updating the repository files with changes you've made to your local copy.\n-   **Pull request:** Collaboration happens on a pull request. The pull request shows the changes in your branch to other people. This pull request will keep the changes you just made on your branch and propose applying them to the main branch.\n-   **Merge:** A merge adds the changes in your pull request and branch into the main branch\n\n# Demo No 3:\n\nGit and GitHub\n\n# Recipe (Ingredients) for this course {.smaller}\n\n-   Python (ideally v3.10)\n-   Conda, more specifically MiniConda\n-   Jupyter Notebook Lab\n-   Git -- GitHub Account\n\nLot of attractive packages **(it's like the seasoning)** Like in any recipe, the right ingredients define the dish's success; In here; installing your components appropriately will help run the python scripts correctly.\n\n# Python Basics {.smaller}\n\n::: columns\n::: {.column width=\"60%\"}\n-  Variables\n-  Types of variables (*this is particularly important*)\n-  Arithmetic operators\n-  Boolean logic\n-  Strings (Text)\n-  Printing (*The initial way of debugging*)\n-  Comments (*The best investment of your coding time, trust me*)\n:::\n\n::: {.column width=\"40%\"}\n![](img/again.gif)\n:::\n:::\n\n## As simple as a calculator\n\nLet us calculate the distance between `U St Andrews` and `Edinburgh`, but in `kms`\n\n::: {.cell output-location='fragment' execution_count=3}\n``` {.python .cell-code}\n53.2 * 1.609344\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n85.61710080000002\n```\n:::\n:::\n\n\n## Variables\n\n-   Great calculator, but how can we make it store values?\n-   Do this by defining variables\n-   Can later be called by the variable name\n-   Variable names are case-sensitive and unique\n\n::: {.cell output-location='fragment' execution_count=4}\n``` {.python .cell-code}\nDistanceStAndrewsToEDI = 53.2\nMilesToKm = 1.609344\nDistanceFromStAndrewsToEDI = DistanceStAndrewsToEDI * MilesToKm\nDistanceFromStAndrewsToEDI\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n85.61710080000002\n```\n:::\n:::\n\n\n## Variables\n\nWe can now reuse the variable `MileToKms` in the next cell without having to define it again!\n\n::: {layout-nrow=\"1\" style=\"margin-bottom: 0.3em;\"}\n![](img/variables_python.png){width=\"50%\" fig-align=\"center\"}\n:::\n\n::: {.cell output-location='fragment' execution_count=5}\n``` {.python .cell-code}\nMarathonDistanceInMiles = 26.219\nMarathonDistanceInKms = MilesToKm * MarathonDistanceInMiles\nMarathonDistanceInKms\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n42.195390336\n```\n:::\n:::\n\n\n::: footer\n[Learn more: What is a Variable](https://stevenpcurtis.medium.com/what-is-a-variable-3447ac1331b9)\n:::\n\n## Types of variable\n\n::: {style=\"margin-bottom: 0.9em;\"}\nVariables actually `have a type`, which defines the way it is stored. The basic types are:\n:::\n\n::: {layout-nrow=\"1\" style=\"margin-bottom: 0.3em; max-width: 90%\"}\n![](img/types_variable.png)\n:::\n\n## Why this is important {.smaller}\n\n::: {layout-nrow=\"1\" style=\"margin-left: 4em; margin-right: 4em;\"}\n![](img/error_variable.png)\n:::\n\n:::{.callout-tip collapse=\"false\" appearance=\"minimal\"}\n**To remember!** We can't do arithmetic operations on variables of different types. Therefore, make sure that you are always aware of your variables types! You can find the type of a variable by adding `type()`. For example: `type(x)`.\n:::\n\n::: {.cell output-location='fragment' execution_count=6}\n``` {.python .cell-code}\nx = 10\ntype(x)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nint\n```\n:::\n:::\n\n\n## Casting types\n\n**Luckily**, Python offers us a way of converting variables to different types!\n\n*Casting* -- the operation of converting a variable to a different type\n\n::: {.cell output-location='fragment' execution_count=7}\n``` {.python .cell-code}\ny = '20'\na = x + int(y)\nprint(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n30\n```\n:::\n:::\n\n\nSimilar methods exist for other data types: `int()`, `float()`, `str()`\n\n# Quiz\n\nWhat would be the result?\n\n::: {.cell output-location='fragment' execution_count=8}\n``` {.python .cell-code}\nx = '10'\ny = '20'\nx+y\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n'1020'\n```\n:::\n:::\n\n\n## Operations \n(Arithmetic, Logical, Comparison)\n\n::: r-stack\n![](img/operators.png){.fragment .fade-in-then-out fig-align=\"center\" width=\"50%\"}\n\n![](img/comparison_operators.png){.fragment .fade-in-then-out fig-align=\"centre\" width=\"60%\"}\n\n![](img/LogicalOperators.png){.fragment .fade-in-then-out fig-align=\"centre\" width=\"70%\"}\n:::\n\n## List\n\n- Allow to store multiple numbers, strings, or booleans in a single variable.\n- Square brackets are used to denote lists. Items in a **list** are ordered, indexed, and allow for duplicate members. \n- Indexing starts at 0.\n\n::: {.cell output-location='column-fragment' execution_count=9}\n``` {.python .cell-code}\nlst1 = [6, 7, 8, 9, 11, 2, 0]\nlst2 = [\"A\", \"B\", \"C\"]\nlst3 = [True, False, True]\nprint(lst1[0])\nprint(lst1[0:3])\nprint(lst2[-4:-1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n6\n[6, 7, 8]\n['A', 'B']\n```\n:::\n:::\n\n\n## Dictionaries {auto-animate=\"true\"}\n\nAre unordered, changeable, indexed, and do not allow duplicate elements. In contrast to lists each **value** is also assigned with **key**.\n\n::: {.callout-tip collapse=\"false\"}\nValues can be selected using the **associated key**. You can also use the key to define a value to change.\n:::\n\n```{.python code-line-numbers=\"|1|4\"}\ncls = {\"code\": \"GG3209\", \"Name\":\"Spatial Analysis with Python\"}\nprint(cls)\nprint(cls[\"Name\"])\ncls[\"code\"] = 461\nprint(cls)\n```\n\n## Dictionaries {auto-animate=\"true\"}\n\nAre unordered, changeable, indexed, and do not allow duplicate elements. In contrast to lists each **value** is also assigned with **key**.\n\n::: {.callout-tip collapse=\"false\" appearance=\"default\"}\nValues can be selected using the **associated key**. You can also use the key to define a value to change.\n:::\n\n::: {.cell output-location='fragment' execution_count=10}\n``` {.python .cell-code}\ncls = {\"code\": \"GG3209\", \"Name\":\"Spatial Analysis with Python\"}\nprint(cls)\nprint(cls[\"Name\"])\ncls[\"code\"] = 461\nprint(cls)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'code': 'GG3209', 'Name': 'Spatial Analysis with Python'}\nSpatial Analysis with Python\n{'code': 461, 'Name': 'Spatial Analysis with Python'}\n```\n:::\n:::\n\n\n## Arrays\nSimilar to **lists**; however, they must be `declared`. In this course, we will primarily work with **NumPy** arrays, which will be discussed in more detail in a later module.\n\n::: {.cell output-location='fragment' execution_count=11}\n``` {.python .cell-code}\nmy_array = [1, 2, 3, 4]\nprint(my_array)\n\nprint(my_array[0])   # Output: 1\nprint(my_array[2])   # Output: 3\nmy_array[1] = 7\n\nprint(my_array)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3, 4]\n1\n3\n[1, 7, 3, 4]\n```\n:::\n:::\n\n\n## Commenting\n\n- Useful when you want to remove the code from execution but not permanently\n- *Useful* when your code needs further explanation. Whether for you or anybody else.\n- Comments in Python are done with `#`\n\n```{.python code-line-numbers=\"|1|-|5-8|\"}\n### You can comment before the lines\na=3 # You can comment next to the line\nb=5\n# After the lines\n'''\nThis is a multiline\ncomment.\n'''\n```\n\n# Lab No 1\n\n- Install your python environment and run the initial scripts.\n- Ask us anything. Ask among yourselves as well\n- Do not freak out; failure is progress!\n\n# References {.unnumbered}\n\n::: {#refs}\n\n:::\n\n",
    "supporting": [
      "week1_slides_files/figure-revealjs"
    ],
    "filters": [],
    "includes": {}
  }
}